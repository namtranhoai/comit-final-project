{"version":3,"sources":["components/Loading.js","components/Header.js","components/Categories.js","components/Dishes.js","components/Selected.js","App.js","serviceWorker.js","index.js"],"names":["Loading","React","useState","className","Header","props","onChange","search","placeholder","Categories","categories","map","cat","catSelectedId","id","key","onClick","selectCat","name","Dishes","dishes","dish","src","discription","price","selectDish","Selected","console","log","selectedDishes","removeDish","App","selectedData","state","data","filter","catid","setState","catSelected","addDish","selectedDishesData","push","rmDish","e","searchQ","target","value","toLocaleLowerCase","dishesData","lastIndexOf","loading","favoriesDishes","this","axios","get","then","res","cats","catch","error","resData","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f64c1685.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Loading(){\r\n    let [loading,setLoading] = React.useState('');\r\n    return (\r\n        <div className=\"loading-container\">\r\n            {/* <img className=\"loading-logo\" src=\"./images/nelliskitchen.jpg\"/> */}\r\n            <div className=\"loading\">Loading....</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Loading;","import React from 'react'\r\n\r\nfunction Header(props){\r\n    return (\r\n        <header>\r\n            <input className=\"searchBox\" onChange={props.search} placeholder=\"Search ...\"/>\r\n        </header>\r\n    )\r\n}\r\nexport default Header;","import React from 'react'\r\nfunction Categories(props){\r\n    // console.log(props.categories);\r\n    return (\r\n        <div className=\"left-categories\">\r\n            {props.categories.map((cat)=>{\r\n               return(\r\n                <div className={\"category-detail \"+ ((props.catSelectedId===cat.id)?'active':'')} key={cat.id} onClick={() => props.selectCat(cat)}>\r\n                    {cat.name}\r\n                </div>\r\n               )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\nexport default Categories;","import React from 'react'\r\n\r\nfunction Dishes(props){\r\n      //console.log(props.dishes);\r\n    return (\r\n        <div className=\"dishes-container\">\r\n            {\r\n                props.dishes.map((dish)=>{\r\n                    return (\r\n                        <div className=\"dish-detail\" key={'dish-'+ dish.id}>\r\n                            <img className=\"dish-image\" src=\"https://via.placeholder.com/100\"/>\r\n                            <div className=\"dish-information\">\r\n                                <div>\r\n                                    <label key={dish.id} >[{dish.id}]{dish.name}</label>\r\n                                    <p>\r\n                                        {dish.discription}\r\n                                    </p>\r\n                                    <span className=\"dish-detail-price\"><i>$</i>{dish.price/100}</span>\r\n                                </div>\r\n                                <button onClick={()=>props.selectDish(dish)}>Selected</button>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Dishes;","import React from 'react'\r\n\r\nfunction Selected(props){\r\n    console.log(props);\r\n    return (\r\n        <div className=\"selected-container\">\r\n            {\r\n                props.selectedDishes.map((dish)=>{\r\n                    return (\r\n                        <div className=\"selected-detail\" key={'selected-'+dish.id}>\r\n                            <div className=\"selected-information\">\r\n                                <div>\r\n                                    <label key={dish.id} >[{dish.id}]{dish.name}</label>\r\n                                </div>\r\n                                <button onClick={()=>props.removeDish(dish)}>Remove</button>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Selected","import React from 'react';\nimport axios from 'axios';\nimport Loading from './components/Loading';\nimport Header from './components/Header'\nimport Categories from './components/Categories'\nimport Dishes from './components/Dishes'\nimport Selected from './components/Selected'\n\nimport './App.css';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      data:[],\n      categories:[],\n      dishes: [],\n      catSelected: [],\n      selectedDishes:[],\n      favoriesDishes:[]\n    }\n  }\n\n\n  componentWillMount(){\n    this.setState({loading: true});\n    axios.get('./data/menu-cat.json')\n          .then(res =>{\n            let cats = res.data\n            this.setState({\n              categories: cats,\n              catSelected: cats[0]\n            });\n          })\n          .catch(function(error){\n            console.log(error);\n          })\n    axios.get('./data/menu1.json')\n          .then(res =>{\n            let resData = res.data\n            let selectedData = this.state.data.filter((dish)=>{ return dish.catid===this.state.catSelected.id});\n            this.setState({\n              loading: false,\n              data: resData,\n              dishes: selectedData,\n            });\n          })\n          .catch(function(error){\n            console.log(error);\n          })\n\n  }\n  selectCat = (cat) => {\n    const selectedData = this.state.data.filter((dish)=>{ return dish.catid===cat.id});\n    this.setState(\n      {\n        catSelected:cat,\n        dishes: selectedData,\n      }\n    )\n  }\n  selectDish = (addDish) => {\n    console.log(addDish);\n\n    const selectedDishesData = this.state.selectedDishes;\n    selectedDishesData.push(addDish);\n    this.setState(\n      {\n        selectedDishes:selectedDishesData,\n      }\n    )\n  }\n  removeDish = (rmDish) => {\n    console.log(rmDish);\n    const selectedDishesData = this.state.selectedDishes.filter((dish)=>{ return dish.id!==rmDish.id})\n    this.setState(\n      {\n        selectedDishes:selectedDishesData,\n      }\n    )\n  }\n\n  search = (e) => {\n    const searchQ = e.target.value.toLocaleLowerCase();\n    const dishesData= this.state.data.filter(function(dishes) {\n      return dishes.name.toLocaleLowerCase().lastIndexOf(searchQ)>-1;\n    });\n    this.setState({\n        dishes: dishesData\n    })\n  }\n\n  render (){\n\n    if(this.state.loading === false) {\n        return(\n            <div className=\"App\">\n              <div className=\"left-container\">\n                {/* <img className=\"left-logo\" src=\"./images/logo.jpg\"/> */}\n                <h1>Categories</h1>\n                <Categories\n                  categories={this.state.categories}\n                  catSelectedId={this.state.catSelected.id}\n                  selectCat={this.selectCat}\n                />\n              </div>\n              <div className=\"main-container\">\n                <Header\n                  search={this.search}/>\n                <Dishes\n                  dishes={this.state.dishes}\n                  selectDish={this.selectDish}\n                  />\n              </div>\n              <div className=\"right-container\">\n                <Selected\n                    selectedDishes={this.state.selectedDishes}\n                    removeDish={this.removeDish}\n                    />\n              </div>\n\n            </div>\n        )\n     }else{\n        return (\n          <Loading />\n        )\n     }\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />\n    ,\n     document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}